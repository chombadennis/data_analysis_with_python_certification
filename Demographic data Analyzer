def calculate_demographic_data(print_data=True):
    # Read data from file
    df = pd.read_csv('adult.data.csv')

    # How many of each race are represented in this dataset? This should be a Pandas series with race names as the index labels.
    race_count = df['race'].value_counts()
    

    # What is the average age of men?
    male_df = df.loc[df['sex'] == 'Male',['sex', 'age']]
    average_age_men = round(male_df['age'].mean(), 1)
    

    # What is the percentage of people who have a Bachelor's degree?
    bachelors = df.loc[df['education'] == 'Bachelors', 'education']
    percentage_bachelors = round((len(bachelors)/len(df.education)) * 100, 1)


    # What percentage of people with advanced education (`Bachelors`, `Masters`, or `Doctorate`) make more than 50K?
    options = ['Doctorate','Masters', 'Bachelors']
    edu_df = df.loc[df['education'].isin (options)]
    g_salary = edu_df.loc[edu_df['salary'] == '>50K']
    perc_dmb = round((len(g_salary)/len(df['education'])) * 100, 1)
    

    # What percentage of people without advanced education make more than 50K?
    options = ['Doctorate','Masters', 'Bachelors']
    eduh_df = df.loc[~df['education'].isin (options)]
    l_salary = eduh_df.loc[eduh_df['salary'] == '>50K']
    perc_wtdmb_less = round((len(l_salary)/len(df['education'])) * 100, 1)
    

    # with and without `Bachelors`, `Masters`, or `Doctorate`
    options = ['Doctorate','Masters', 'Bachelors']
    edu_df = df.loc[df['education'].isin (options)]
    g_salary = edu_df.loc[edu_df['salary'] == '>50K']
    higher_education = round((len(g_salary)/len(df['education'])) * 100, 1)
    
    
    lower_education = None
    options = ['Doctorate','Masters', 'Bachelors']
    eduh_df = df.loc[~df['education'].isin (options)]
    l_salary = eduh_df.loc[eduh_df['salary'] == '>50K']
    lower_education = round((len(l_salary)/len(df['education'])) * 100, 1)
    

    # percentage with salary >50K
    ## higher_education_rich
    options = ['Doctorate','Masters', 'Bachelors']
    edu_df = df.loc[df['education'].isin (options)]
    g_salary = edu_df.loc[edu_df['salary'] == '>50K']
    higher_education_rich = round((len(g_salary)/len(df['education'])) * 100, 1)
    

    ##lower_education_rich 
    options = ['Doctorate','Masters', 'Bachelors']
    eduh_df = df.loc[~df['education'].isin (options)]
    l_salary = eduh_df.loc[eduh_df['salary'] == '>50K']
    lower_education_rich = round((len(l_salary)/len(df['education'])) * 100, 1)
    
    
    # What is the minimum number of hours a person works per week (hours-per-week feature)?
    min_work_hours = (df['hours-per-week']).min()
    

    # What percentage of the people who work the minimum number of hours per week have a salary of >50K?
    num_min_workers = df.loc[df['hours-per-week']==1]

    ## rich_percentage 
    min_hrs_workers_high = min_hrs_workers.loc[min_hrs_workers['salary']=='>50K']
    rich_percentage = round((len(min_hrs_workers_high)/len(min_hrs_workers)) * 100, 1)
    


    # What country has the highest percentage of people that earn >50K?
    ## highest_earning_country
    highest_earning_country
    place = df.loc[df['salary']== '>50K', ['native-country']]
    countries = place.value_counts()
    highest_earning_country = countries[countries>7000]

    ## highest_earning_country_percentage = None
    new_df = countries.to_frame()
    new_df['percentage'] = (new_df['count']/len(place)) * 100
    percentage = new_df['percentage']
    highest_earning_country_percentage = percentage.max()

    # Identify the most popular occupation for those who earn >50K in India.
    ## top_IN_occupation = None
    selection = ['>50K']
    india = ['India']
    india_df = df.loc[df['native-country'].isin(india), ['native-country', 'salary', 'occupation']]
    india_occup = india_df.loc[india_df['salary'].isin(selection), ['native-country', 'salary', 'occupation']]
    occupation = india_occup['occupation'].value_counts()
    top_IN_occupation = occupation[occupation>20]

    # DO NOT MODIFY BELOW THIS LINE

    if print_data:
        print("Number of each race:\n", race_count) 
        print("Average age of men:", average_age_men)
        print(f"Percentage with Bachelors degrees: {percentage_bachelors}%")
        print(f"Percentage with higher education that earn >50K: {higher_education_rich}%")
        print(f"Percentage without higher education that earn >50K: {lower_education_rich}%")
        print(f"Min work time: {min_work_hours} hours/week")
        print(f"Percentage of rich among those who work fewest hours: {rich_percentage}%")
        print("Country with highest percentage of rich:", highest_earning_country)
        print(f"Highest percentage of rich people in country: {highest_earning_country_percentage}%")
        print("Top occupations in India:", top_IN_occupation)

    return {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_education_rich,
        'lower_education_rich': lower_education_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage':
        highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }
